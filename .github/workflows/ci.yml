name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  SLINT_BACKEND: winit
  JAVA_HOME: /usr/lib/jvm/temurin-17-jdk

jobs:
  test-android:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Install Android SDK components
      run: |
        sdkmanager "platforms;android-34" "build-tools;34.0.0" "ndk;26.1.10909125"
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Build Android App
      run: |
        cd android
        ./gradlew assembleDebug
    
    - name: Run Android Tests
      run: |
        cd android
        ./gradlew test
    
    - name: Lint Android Code
      run: |
        cd android
        ./gradlew lintDebug

  test-rust:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install cargo-ndk
      run: cargo install cargo-ndk
    
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Install Android NDK
      run: |
        sdkmanager "ndk;26.1.10909125"
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Test Rust Code
      run: |
        cd rust
        cargo test
    
    - name: Check Rust Format
      run: |
        cd rust
        cargo fmt -- --check
    
    - name: Clippy Check
      run: |
        cd rust
        cargo clippy -- -D warnings
    
    - name: Build Rust Library for Android
      run: |
        cd rust
        chmod +x build_android.sh
        ./build_android.sh
    
    - name: Verify Rust Library Artifacts
      run: |
        echo "Checking Rust library artifacts..."
        ls -la android/app/src/main/jniLibs/
        for arch in arm64-v8a armeabi-v7a x86 x86_64; do
          if [ -f "android/app/src/main/jniLibs/$arch/libmainlogic.so" ]; then
            echo "âœ“ $arch library exists"
            file "android/app/src/main/jniLibs/$arch/libmainlogic.so"
          else
            echo "âœ— $arch library missing"
            exit 1
          fi
        done
    
    - name: Upload Rust Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust-libraries
        path: android/app/src/main/jniLibs/
        retention-days: 30

  test-integration:
    runs-on: ubuntu-latest
    needs: [test-rust]
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Rust Artifacts
      uses: actions/download-artifact@v4
      with:
        name: rust-libraries
        path: android/app/src/main/jniLibs/
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Install Android SDK components
      run: |
        sdkmanager "platforms;android-34" "build-tools;34.0.0" "ndk;26.1.10909125"
    
    - name: Build Complete Project
      run: |
        chmod +x build.sh
        ./build.sh
    
    - name: Verify APK Contents
      run: |
        echo "Checking APK contents..."
        unzip -l android/app/build/outputs/apk/debug/app-debug.apk | grep -E "(lib|\.so)"
        echo "APK size: $(ls -lh android/app/build/outputs/apk/debug/app-debug.apk | awk '{print $5}')"

  test-slint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Check Slint UI Files
      run: |
        echo "Checking Slint UI files..."
        if [ -f "rust/ui/app.slint" ]; then
          echo "âœ“ Slint UI file exists"
          head -20 rust/ui/app.slint
        else
          echo "âœ— Slint UI file missing"
          exit 1
        fi
    
    - name: Validate Slint Syntax
      run: |
        cd rust
        cargo check --features slint/ui

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Security Scan
      uses: github/codeql-action/init@v3
      with:
        languages: java, kotlin, cpp
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  test-build-scripts:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Build Scripts
      run: |
        echo "Checking build scripts..."
        if [ -f "build.sh" ]; then
          echo "âœ“ Main build script exists"
          chmod +x build.sh
        else
          echo "âœ— Main build script missing"
          exit 1
        fi
        
        if [ -f "rust/build_android.sh" ]; then
          echo "âœ“ Rust build script exists"
          chmod +x rust/build_android.sh
        else
          echo "âœ— Rust build script missing"
          exit 1
        fi
    
    - name: Validate Script Syntax
      run: |
        bash -n build.sh
        bash -n rust/build_android.sh
        echo "âœ“ All scripts have valid syntax"

  release:
    needs: [test-android, test-rust, test-integration, test-slint, security-scan, test-build-scripts]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Rust Artifacts
      uses: actions/download-artifact@v4
      with:
        name: rust-libraries
        path: android/app/src/main/jniLibs/
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Install Android SDK components
      run: |
        sdkmanager "platforms;android-34" "build-tools;34.0.0" "ndk;26.1.10909125"
    
    - name: Build Release APK
      run: |
        cd android
        ./gradlew assembleRelease
    
    - name: Sign Release APK
      run: |
        echo "Creating test keystore for signing..."
        keytool -genkey -v -keystore app.keystore -alias app -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=Test, OU=Test, O=Test, L=Test, S=Test, C=US"
        jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore app.keystore -storepass android -keypass android android/app/build/outputs/apk/release/app-release-unsigned.apk app
    
    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk
        path: |
          android/app/build/outputs/apk/release/
          app.keystore
        retention-days: 90
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          android/app/build/outputs/apk/release/app-release-unsigned.apk
        body: |
          ## ðŸš€ Modular Android App Release
          
          ### Features
          - âœ… Rust backend with JNI integration
          - âœ… Slint UI framework
          - âœ… Native activity support
          - âœ… Sensor monitoring
          - âœ… Notification system
          - âœ… Async callbacks
          - âœ… Runtime library updates
          
          ### Build Info
          - Android API: 34
          - Rust: Stable
          - Java: 17
          - NDK: 26.1.10909125
          
          ### Installation
          1. Download the APK
          2. Enable "Install from unknown sources"
          3. Install the APK
          4. Grant required permissions
          
          ### Testing
          - Test all buttons in the app
          - Initialize native activity first
          - Check logcat for any issues 